# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: cimg/python:3.13
        environment:
          PIPENV_VENV_IN_PROJECT: true
          AWS_ACCESS_KEY_ID: dummyaccesskey
          AWS_SECRET_ACCESS_KEY: dummysecretkey
      - image: postgres:17
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circle_test
      - image: localstack/localstack:4.3.0

    working_directory: ~/repo

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v3-dependencies-{{ .Branch }}-{{ checksum "uv.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-{{ .Branch }}-
      - run:
          name: Upgrade uv
          command: |
            python -m pip install uv
      - run:
          name: install dependencies
          command: |
            uv sync

      - save_cache:
          key: v3-dependencies-{{ .Branch }}-{{ checksum "uv.lock" }}
          paths:
            - ./venv
            - /usr/local/bin

      - run:
          name: prepare boto3 credentials and awscli (Set via ENVARS[AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY])
          command: |
            # create ~/.aws/config
            echo "Creating: ~/.aws/config"
            mkdir -p ~/.aws
            cat <<EOT > ~/.aws/config
            [default]
            region = ${AWS_DEFAULT_REGION}
            output = json
            [profile ${AWS_PROFILE}]
            region = ${AWS_DEFAULT_REGION}
            source_profile = default
            EOT
            # create .aws/credentials
            echo "Creating: ~/.aws/credentials"
            cat <<EOT > ~/.aws/credentials
            [default]
            aws_access_key_id = ${CIRCLECI_AWS_ACCESS_KEY_ID}
            aws_secret_access_key = ${CIRCLECI_AWS_SECRET_ACCESS_KEY}
            EOT

      - run:
          name: run tests
          command: |
            make test

      - run:
          name: run code checks
          command: |
            python3.8 -m pipenv run make check

      - store_artifacts:
          path: test-reports
          destination: test-reports